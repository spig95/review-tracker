import datetime
import numpy as np
import plotly.graph_objs as go

from scrape_app.utility.helpers import moving_avg_timebased


def get_html_plot(timestamps, ratings, default_delta_days=360, with_slider=False):
    """Generate a plot that shows the moving average of the ratings. The moving average is computed on
    default_delta_days, but if with_slider=True, the user can change the value using a slider. The function
    returns a plot in html format, that can be embedded in any webpage.

    :param timestamps: timestamps
    :param ratings: numerical value representing the restaurant rating
    :param default_delta_days: time window (in days) used to compute the moving average and std
    :param with_slider: if True, a slider allows the user to play with the moving average time window

    :return: plot in html code generated by Plotly, easy to embed in any webpage.
    """
    assert len(timestamps) == len(ratings), (timestamps, ratings)
    if not len(timestamps):
        return "No reviews yet"

    # Instantiate figure
    layout = go.Layout()
    fig = go.Figure(layout=layout)

    # Define slider values
    if with_slider:
        delta_days_steps = [1] + list(np.arange(180, 900, 180))
        if default_delta_days not in delta_days_steps:
            delta_days_steps.append(default_delta_days)
            delta_days_steps.sort()
    else:
        delta_days_steps = [default_delta_days]
    
    # Parameter for sliders layout
    n_steps = len(delta_days_steps)
    default_visibility = [False] * n_steps * 2
    
    # Add one trace for each slider value
    for delta_days in delta_days_steps:
        mov_avg_trace, error_band_trace = moving_stats_traces(timestamps, ratings, delta_days, default_delta_days)
        fig.add_trace(mov_avg_trace)
        fig.add_trace(error_band_trace)

    # Add one trace for the global score
    datetimes = [datetime.datetime.fromtimestamp(ts) for ts in timestamps]
    avg_line = get_global_avg_trace(datetimes, ratings)
    fig.add_trace(avg_line)
    default_visibility.append(avg_line.visible)

    # Add one trace for the original reviews (scatterplot)
    # TODO: add button to toggle visibility, default to False
    original = get_original_reviews_trace(datetimes, ratings)
    fig.add_trace(original)
    default_visibility.append(original.visible)

    # Create and add slider
    if with_slider:
        steps = []
        for i, delta_days in enumerate(delta_days_steps):

            # One step is visible
            visibility = default_visibility.copy()
            visibility[2*i] = True
            visibility[2*i + 1] = True

            step = dict(
                method="update",
                label=f"{int(delta_days / 30)}",
                args=[{"visible": visibility}],  # layout attribute
            )
            steps.append(step)

        sliders_layout = [dict(
            active=np.where(np.array(delta_days_steps) == default_delta_days)[0][0],
            currentvalue={
                "prefix": "The evolution of the average score is computed using the last ",
                "suffix": " months. Use the slider to change the value."
            },
            pad={"t": 50},
            steps=steps
        )]
        fig.update_layout(
            sliders=sliders_layout
        )

    # Finalize the layout
    fig.update_layout(
        xaxis_title="Date",
        yaxis_title="Rating",
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        margin=dict(t=30)
    )

    html = fig.to_html()
    return html


def get_green_rgb(opacity):
    """Get rgba code for our green color"""
    rgb_str = f"rgba(0, 100, 80, {opacity})"
    return rgb_str


def moving_stats_traces(timestamps, ratings, delta_days, default_delta_days):
    """Generate traces with moving average line and std bands."""
    datetimes = [datetime.datetime.fromtimestamp(ts) for ts in timestamps]
    averages, y_lower, y_upper = moving_avg_timebased(timestamps, ratings, delta_days, return_np_array=False)
    visible = delta_days == default_delta_days

    hovertext = [
        f"Average score around {dt.day}/{dt.month}/{dt.year} is {round(a, 2)}" for (dt, a) in zip(datetimes, averages)
    ]

    moving_avg = go.Scatter(
        visible=visible,
        line=dict(color=get_green_rgb(1)),
        name="Average score evolution",
        x=datetimes,
        y=averages,
        hovertext=hovertext,
        hoverinfo="text"
    )

    error_bands = go.Scatter(
        visible=visible,
        x=datetimes + datetimes[::-1],  # datetimes, then datetimes reversed
        y=y_upper + y_lower[::-1],  # upper, then lower reversed
        fill='toself',
        fillcolor=get_green_rgb(0.2),
        line=dict(color='rgba(255,255,255,0)'),
        hoverinfo="skip",
        showlegend=False
    )
    return moving_avg, error_bands


def get_global_avg_trace(datetimes, ratings):
    global_avg = np.mean(ratings)
    return go.Scatter(
        x=datetimes,
        y=np.ones(len(datetimes)) * global_avg,
        line=dict(
            color='black',
            dash='dash'
        ),
        mode='lines',
        name=f"Score considering all reviews.",
        hovertext=f"Score considering review from all time: {np.round(global_avg, 1)}",
        hoverinfo="text"
    )


def get_original_reviews_trace(datetimes, ratings):
    hovertext = [
        f"This is a single review: {round(r, 2)}" for r in ratings
    ]
    return go.Scatter(
        x=datetimes,
        y=ratings,
        mode='markers',
        name='Single reviews',
        marker=dict(
            color=get_green_rgb(0.8),
            # size=3
        ),
        visible=True,
        hovertext=hovertext,
        hoverinfo="text"
    )
